import { render, fireEvent, screen } from "@testing-library/react";
import '@testing-library/jest-dom';
import NoteForm from "./NoteForm";

jest.mock("./NoteForm.css", () => ({
  css: "css",
}));

describe("NoteForm", () => {
  const mockOnAdd = jest.fn();

  const setup = () => {
    return render(<NoteForm onAdd={mockOnAdd} />);
  };

  it("renders the form with input and textarea", () => {
    setup();
    expect(screen.getByPlaceholderText("Title")).toBeInTheDocument();
    expect(screen.getByPlaceholderText("Content")).toBeInTheDocument();
  });

  it("calls onAdd with the correct note object when the form is submitted", () => {
    setup();
    const titleInput = screen.getByPlaceholderText("Title");
    const contentTextarea = screen.getByPlaceholderText("Content");
    const submitButton = screen.getByText("Add Note");

    fireEvent.change(titleInput, { target: { value: "Test Title" } });
    fireEvent.change(contentTextarea, { target: { value: "Test Content" } });
    fireEvent.click(submitButton);

    expect(mockOnAdd).toHaveBeenCalledWith({
      id: expect.any(String), // Since the ID is generated by Date.now().toString(), we can't predict it exactly
      title: "Test Title",
      content: "Test Content",
    });
  });

  it("clears the input and textarea after form submission", () => {
    setup();
    const titleInput = screen.getByPlaceholderText("Title");
    const contentTextarea = screen.getByPlaceholderText("Content");
    const submitButton = screen.getByText("Add Note");

    fireEvent.change(titleInput, { target: { value: "Test Title" } });
    fireEvent.change(contentTextarea, { target: { value: "Test Content" } });
    fireEvent.click(submitButton);

    // @ts-ignore
    expect(titleInput.value).toBe("");
    // @ts-ignore
    expect(contentTextarea.value).toBe("");
  });
});
